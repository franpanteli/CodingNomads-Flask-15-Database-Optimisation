-> user profiles lesson: add a profile editor  
    -> learn how to add profile editing functionality to a user profile page in a python flask app  
    -> challenge of adding an administrator-level profile editor for editing other users' information  

-> edit profile form  
    -> the profile editor form allows users to modify their details, including their name, location, and bio  
    -> located in main/forms.py  
    -> form fields include name, location, bio, with validation to limit text length  
    -> textareafield is used for bio, allowing users to write longer descriptions  
    -> the form doesn't enforce bio validation, so users can leave it blank if they choose  

-> view function  
    -> the view function to handle the profile editor is defined in main/views.py  
    -> a route is set for editing the profile with methods get and post  
    -> when the form is submitted, user data is updated with the new information entered by the user  
    -> the user's name, location, and bio are updated and committed to the database  
    -> if the form is not yet submitted, the existing user information is pre-filled into the form fields  
    -> upon successful submission, a flash message is displayed, and the user is redirected to their profile page  

-> add a button  
    -> a button is added to the user's profile page for easy access to the profile editor  
    -> the button is only shown if the currently authenticated user is the owner of the profile  
    -> the button is displayed using an if statement in the user template (user.html)  
    -> this ensures that only the user themselves can edit their own profile  

-> create an administrator-level profile editor  
    -> administrators are granted the ability to edit any user's profile, including their username, confirmed status, and role  
    -> admins have additional responsibilities and should handle user data with caution  
    -> a form is created in main/forms.py with fields for username, confirmed status, role, name, location, and bio  
    -> a dropdown (selectfield) is used for selecting roles, with integer values for role identification  
    -> the form's username field ensures the edited username isn't already taken by another user  

-> view function for admin editor  
    -> the view function for the admin-level editor is defined with an additional check to ensure the user is an authenticated admin  
    -> the route includes a dynamic user id to specify which user's profile to edit  
    -> similar to the user's profile editor view function, the admin function allows for the modification of the same fields  
    -> admins can edit any user's profile details by querying the user based on their id  

-> add the admin edit button  
    -> a button is added to the user profile page for admins to edit any user's profile  
    -> the button uses a bootstrap class for styling and is linked to the admin's edit page for a specific user  
    -> admins can click the button to modify any user's profile information  

-> summary: create a user profile editor in python + flask  
    -> the process involves creating a form for users to edit their profile information, a view function to handle the form submission, and a button for easy access  
    -> for admins, a separate form and view function are created to edit any user's information  
    -> the admin profile editor includes additional fields and checks for user roles and permissions  