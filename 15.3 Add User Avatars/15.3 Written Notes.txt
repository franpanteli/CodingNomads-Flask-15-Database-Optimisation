-> 15) user profiles lesson  
    -> add user avatars  
    -> 12 min to complete · by brandon gigous  
    -> introduction  
    -> what is a profile avatar  
    -> unicornify  
    -> hashlib  
    -> unicornify user method  
    -> user profile images  
    -> generating hashes  
    -> summary: add user avatars to your python + flask app  

-> what is a profile avatar  
    -> the idea is to allow users to have avatars or profile pictures  
    -> the profile picture is a way for users to represent themselves visually  
    -> the service called unicornify helps with generating unique avatars for users  

-> unicornify  
    -> unicornify is a service that generates unique unicorn images based on an md5 hash  
    -> it was created by benjamin dumke-von der ehe  
    -> it works similarly to gravatar but uses unicorns instead of standard avatars  
    -> the url format to generate a unicorn image is:  
        -> https://unicornify.pictures/avatar/$hash?s=$size  
        -> $hash is a hexadecimal number (up to 64 digits)  
        -> $size is the image size, a power of 2 between 32 and 128  

-> hashlib  
    -> to generate the md5 hashes, the user's email is used as input  
    -> python's standard library hashlib is used to create the hash  
    -> example:  
        -> import hashlib  
        -> hashlib.md5('paul@example.com'.encode('utf-8')).hexdigest()  

-> unicornify user method  
    -> a method is defined to generate the md5 hash and retrieve the unicorn avatar image  
    -> example method:  
        -> url = 'https://unicornify.pictures/avatar'  
        -> hash = hashlib.md5(self.email.lower().encode('utf-8')).hexdigest()  
        -> return f'{url}/{hash}?s={size}'  

-> user profile images  
    -> to include the unicorn avatar in user profiles, custom css classes are defined  
    -> these classes help position the image and profile information  
    -> the profile picture is displayed using the class "img-rounded profile-thumbnail"  
    -> the user’s profile information is placed in the "profile-header" class  

-> example in flask shell  
    -> example:  
        -> user(email="paul@example.com")  
        -> u.unicornify()  
        -> 'https://unicornify.pictures/avatar/a8780c6edeb8eda5678a38e94b8ecafe?s=128'  
        -> u.unicornify(size=32)  
        -> 'https://unicornify.pictures/avatar/a8780c6edeb8eda5678a38e94b8ecafe?s=32'  

-> applying css  
    -> css is used to style the avatar image and position the profile information  
    -> the styles can be linked in the base.html file, which applies them to the templates  

-> dropdown for navigation  
    -> a dropdown menu is added to the navigation bar to display the user’s avatar  
    -> example:  
        -> <img src="{{ current_user.unicornify(size=32) }}">  
        -> the dropdown also includes links to change password, email, or log out  

-> generating hashes  
    -> hashes are computationally intensive, so caching is used to reduce server workload  
    -> the hash is stored once and used for future avatar generation  
    -> a new hash is generated only if the user’s email changes or if it's the first time  

-> example of user class with caching  
    -> a new method is added to cache the md5 hash for the user  
    -> the hash is stored in a database column  
    -> example:  
        -> avatar_hash = db.Column(db.String(32))  
        -> def email_hash(self):  
            -> return hashlib.md5(self.email.lower().encode('utf-8')).hexdigest()  
        -> def unicornify(self, size=128):  
            -> return f'{url}/{self.avatar_hash}?s={size}'  

-> summary: add user avatars to your python + flask app  
    -> an avatar is a profile picture used to represent a user  
    -> unicornify generates unique unicorn avatars based on md5 hashes of user emails  
    -> hashlib is used to generate md5 hashes in python  
    -> a method is created to generate the unicorn avatar for each user  
    -> custom css is used to style the avatar images in the user profile  
    -> caching is used to store the generated hash for quicker avatar retrieval  