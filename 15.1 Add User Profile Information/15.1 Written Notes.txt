-> user profiles lesson overview for creating user profile pages in a social app built with python and flask  
    -> focus on adding user profile information, pinging users, and integrating time zones with flask-moment  
    -> emphasis on allowing users and admins to edit profiles  
    -> user profiles require a database model with fields like name, location, bio, and last seen date  
    -> user model extended with additional fields for storing user data like name, location, and bio  
    -> last seen field is set to the current time with the default value as the current utc time  
    -> new fields are necessary to store unique user information on their profile page  

-> adding user profile information  
    -> the first step is to add additional columns to the user model for name, location, bio, and last seen  
    -> columns are defined as db.string for short text (like name and location) and db.text for longer text (like bio)  
    -> last_seen uses db.datetime and is set to default to the current utc time via datetime.utcnow()  

-> pinging your users  
    -> introduces the concept of "pinging" users to update their last_seen field whenever they make a request  
    -> a function to update the last_seen field is called every time a user makes an authenticated request  
    -> the `ping()` function updates the last_seen timestamp to the current time  
    -> the `before_request` function calls `ping()` on authenticated users to update their last_seen time  

-> flask-moment for time handling  
    -> explanation of handling different time zones for users with flask-moment, which integrates moment.js with flask  
    -> flask-moment allows for converting utc time into the user's local time for displaying timestamps like last seen  
    -> flask-moment is installed via `pip install flask-moment` and requires the inclusion of moment.js in the templates  
    -> flask-moment is used in the templates to display times using the `moment` object, which formats the `last_seen` field  

-> user view function  
    -> the user view function retrieves the user profile from the database based on the username in the url  
    -> the dynamic route `@main.route('/user/<username>')` handles displaying the profile page for a given user  
    -> if the user is not found, flask returns a 404 error page  

-> user template  
    -> template structure for displaying the user profile information in html  
    -> displays user details like name, location, bio, and last seen time in a bootstrap table  
    -> the user's email is only shown if the current user is an admin  
    -> `moment()` is used to convert the utc `last_seen` time into a relative time format (e.g., "5 minutes ago")  

-> profile link  
    -> a link to the user's profile is added to the navigation bar if the user is authenticated  
    -> unauthenticated users do not see a profile link in the navbar  
    -> the profile link redirects authenticated users to their own profile page  

-> summary of adding info to a user profile in python + flask  
    -> to add profile info, extend the user model with name, location, bio, and last_seen columns  
    -> the ping function updates the user's last_seen time on each request  
    -> flask-moment helps display user times in local time by converting utc times into the user's timezone  